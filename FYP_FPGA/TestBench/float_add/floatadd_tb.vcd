$date
	Tue May 21 09:10:06 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module floatAdd_TB $end
$var wire 16 ! sum [15:0] $end
$var reg 16 " floatA [15:0] $end
$var reg 16 # floatB [15:0] $end
$scope module FADD $end
$var wire 16 $ floatA [15:0] $end
$var wire 16 % floatB [15:0] $end
$var reg 1 & cout $end
$var reg 6 ' exponent [5:0] $end
$var reg 5 ( exponentA [4:0] $end
$var reg 5 ) exponentB [4:0] $end
$var reg 11 * fraction [10:0] $end
$var reg 11 + fractionA [10:0] $end
$var reg 11 , fractionB [10:0] $end
$var reg 10 - mantissa [9:0] $end
$var reg 8 . shiftAmount [7:0] $end
$var reg 1 / sign $end
$var reg 16 0 sum [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11110001010001 0
0/
b1 .
b1010001 -
b1011010000 ,
b10111010010 +
b10001010001 *
b1101 )
b1110 (
b1111 '
0&
b11010110100001 %
b11100111010010 $
b11010110100001 #
b11100111010010 "
b11110001010001 !
$end
#1000
b11010110100001 !
b11010110100001 0
b1101 '
b10000000000 ,
b10110100001 +
b0 )
b1101 (
b0 #
b0 %
b11010110100001 "
b11010110100001 $
#2000
b11100111010010 !
b11100111010010 0
b0 '
b10111010010 ,
b10000000000 +
b1110 )
b0 (
b11100111010010 #
b11100111010010 %
b0 "
b0 $
#3000
b1100110101011110 !
b1100110101011110 0
b101011110 -
1/
1&
b10101011110 *
b10 .
b10011 '
b111110101 ,
b10010100100 +
b10010 )
b10100 (
b100101111010110 #
b100101111010110 %
b1101000010100100 "
b1101000010100100 $
#4000
