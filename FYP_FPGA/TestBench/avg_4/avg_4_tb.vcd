$date
	Wed May 22 07:37:31 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module avg_4_TB $end
$var wire 16 ! avgout [15:0] $end
$var reg 16 " a [15:0] $end
$var reg 16 # b [15:0] $end
$var reg 16 $ c [15:0] $end
$var reg 16 % d [15:0] $end
$scope module avg0 $end
$var wire 16 & a [15:0] $end
$var wire 16 ' b [15:0] $end
$var wire 16 ( c [15:0] $end
$var wire 16 ) d [15:0] $end
$var wire 16 * out3 [15:0] $end
$var wire 16 + out2 [15:0] $end
$var wire 16 , out1 [15:0] $end
$var wire 16 - avgout [15:0] $end
$var reg 16 . qrter [15:0] $end
$scope module avg_add0 $end
$var wire 16 / floatA [15:0] $end
$var wire 16 0 floatB [15:0] $end
$var reg 1 1 cout $end
$var reg 6 2 exponent [5:0] $end
$var reg 5 3 exponentA [4:0] $end
$var reg 5 4 exponentB [4:0] $end
$var reg 11 5 fraction [10:0] $end
$var reg 11 6 fractionA [10:0] $end
$var reg 11 7 fractionB [10:0] $end
$var reg 10 8 mantissa [9:0] $end
$var reg 8 9 shiftAmount [7:0] $end
$var reg 1 : sign $end
$var reg 16 ; sum [15:0] $end
$upscope $end
$scope module avg_add1 $end
$var wire 16 < floatA [15:0] $end
$var wire 16 = floatB [15:0] $end
$var reg 1 > cout $end
$var reg 6 ? exponent [5:0] $end
$var reg 5 @ exponentA [4:0] $end
$var reg 5 A exponentB [4:0] $end
$var reg 11 B fraction [10:0] $end
$var reg 11 C fractionA [10:0] $end
$var reg 11 D fractionB [10:0] $end
$var reg 10 E mantissa [9:0] $end
$var reg 8 F shiftAmount [7:0] $end
$var reg 1 G sign $end
$var reg 16 H sum [15:0] $end
$upscope $end
$scope module avg_add2 $end
$var wire 16 I floatA [15:0] $end
$var wire 16 J floatB [15:0] $end
$var reg 1 K cout $end
$var reg 6 L exponent [5:0] $end
$var reg 5 M exponentA [4:0] $end
$var reg 5 N exponentB [4:0] $end
$var reg 11 O fraction [10:0] $end
$var reg 11 P fractionA [10:0] $end
$var reg 11 Q fractionB [10:0] $end
$var reg 10 R mantissa [9:0] $end
$var reg 8 S shiftAmount [7:0] $end
$var reg 1 T sign $end
$var reg 16 U sum [15:0] $end
$upscope $end
$scope module avg_mult0 $end
$var wire 16 V floatA [15:0] $end
$var wire 16 W floatB [15:0] $end
$var reg 6 X exponent [5:0] $end
$var reg 22 Y fraction [21:0] $end
$var reg 11 Z fractionA [10:0] $end
$var reg 11 [ fractionB [10:0] $end
$var reg 10 \ mantissa [9:0] $end
$var reg 16 ] product [15:0] $end
$var reg 1 ^ sign $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0^
b100000000100110 ]
b100110 \
b10000000000 [
b10000100110 Z
b100110000000000000 Y
b10000 X
b11010000000000 W
b100100000100110 V
b100100000100110 U
0T
b10 S
b100110 R
b11100111001 Q
b100010100 P
b10000100110 O
b10001 N
b1111 M
b10010 L
0K
b100011100111001 J
b11110001010001 I
b100011100111001 H
0G
b101 F
b1100111001 E
b11101011110 D
b100101 C
b11100111001 B
b10001 A
b1100 @
b10001 ?
0>
b100011101011110 =
b1011000010100011 <
b11110001010001 ;
0:
b1 9
b1010001 8
b1011010000 7
b10111010010 6
b10001010001 5
b1101 4
b1110 3
b1111 2
01
b11010110100001 0
b11100111010010 /
b11010000000000 .
b100000000100110 -
b11110001010001 ,
b100011100111001 +
b100100000100110 *
b100011101011110 )
b1011000010100011 (
b11010110100001 '
b11100111010010 &
b100011101011110 %
b1011000010100011 $
b11010110100001 #
b11100111010010 "
b100000000100110 !
$end
#1000
b0 !
b0 -
b0 ]
b0 *
b0 U
b0 V
b0 L
b10000000000 Q
b10000000000 P
b0 N
b0 M
b0 +
b0 H
b0 J
b0 ?
b10000000000 D
b10000000000 C
b0 A
b0 @
b0 ,
b0 ;
b0 I
b0 2
b10000000000 7
b10000000000 6
b0 4
b0 3
b0 %
b0 )
b0 =
b0 $
b0 (
b0 <
b0 #
b0 '
b0 0
b0 "
b0 &
b0 /
#2000
b1100010100110000 !
b1100010100110000 -
b1100010100110000 ]
b100110000 \
b100110000000000000000 Y
b10100110000 Z
b10001 X
1^
b1100110100110000 *
b1100110100110000 U
b1100110100110000 V
b100110000 R
1T
1K
b10100110000 O
b101 S
b10011 L
b10101011110 Q
b101110 P
b10011 N
b1110 M
b1100110101011110 +
b1100110101011110 H
b1100110101011110 J
b101011110 E
1G
1>
b10101011110 B
b10 F
b10011 ?
b111110101 D
b10010100100 C
b10010 A
b10100 @
b11100111010010 ,
b11100111010010 ;
b11100111010010 I
b10111010010 7
b1110 4
b100101111010110 %
b100101111010110 )
b100101111010110 =
b1101000010100100 $
b1101000010100100 (
b1101000010100100 <
b11100111010010 #
b11100111010010 '
b11100111010010 0
#3000
